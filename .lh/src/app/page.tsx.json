{
    "sourceFile": "src/app/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1750600403745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750600410516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -616,9 +616,9 @@\n \n       <TaskForm isOpen={isTaskFormOpen} onClose={handleCloseTaskForm} onSubmit={handleSaveTask} taskToEdit={taskToEdit} teams={teams} />\n \n       <footer className=\"py-6 text-center text-sm text-muted-foreground border-t border-border/50\">\n-        ¬© {currentYear} TaskFlow. Craftedby Dravya Shah\n+        ¬© {currentYear} TaskFlow. Developed Dravya Shah\n       </footer>\n     </div>\n   );\n }\n"
                },
                {
                    "date": 1750600429591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -470,9 +470,9 @@\n             </p>\n           </div>\n         </main>\n         <footer className=\"py-6 text-center text-sm text-muted-foreground border-t border-border/50\">\n-          ¬© {currentYear} TaskFlow. Crafted with üß† & ‚ù§Ô∏è.\n+          ¬© {currentYear} TaskFlow. developed By \n         </footer>\n       </div>\n     );\n   }\n"
                },
                {
                    "date": 1750600438921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -470,9 +470,9 @@\n             </p>\n           </div>\n         </main>\n         <footer className=\"py-6 text-center text-sm text-muted-foreground border-t border-border/50\">\n-          ¬© {currentYear} TaskFlow. developed By \n+          ¬© {currentYear} TaskFlow. Developed By Dravya shah\n         </footer>\n       </div>\n     );\n   }\n"
                },
                {
                    "date": 1750605342523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -588,9 +588,9 @@\n             <p className=\"max-w-sm\">Try adjusting your search or filter criteria.</p>\n           </div>\n         )}\n \n-        { (tasks.length === 0 || displayedTasks.length > 0) && (\n+        { (tasks.length === 0 || displayedTasks.length > 0 ) && (\n             <TaskList \n               tasks={displayedTasks} \n               onEditTask={handleOpenTaskForm} \n               onDeleteTask={handleDeleteTask} \n"
                },
                {
                    "date": 1750605350345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -588,9 +588,9 @@\n             <p className=\"max-w-sm\">Try adjusting your search or filter criteria.</p>\n           </div>\n         )}\n \n-        { (tasks.length === 0 || displayedTasks.length > 0 && displ) && (\n+        { (tasks.length === 0 || displayedTasks.length > 0 && displayedTasks.) && (\n             <TaskList \n               tasks={displayedTasks} \n               onEditTask={handleOpenTaskForm} \n               onDeleteTask={handleDeleteTask} \n"
                },
                {
                    "date": 1750605359611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -588,9 +588,9 @@\n             <p className=\"max-w-sm\">Try adjusting your search or filter criteria.</p>\n           </div>\n         )}\n \n-        { (tasks.length === 0 || displayedTasks.length > 0 && displayedTasks.) && (\n+        { (tasks.length === 0 || displayedTasks.length > 0 && displayedTasks.map) && (\n             <TaskList \n               tasks={displayedTasks} \n               onEditTask={handleOpenTaskForm} \n               onDeleteTask={handleDeleteTask} \n"
                }
            ],
            "date": 1750600403745,
            "name": "Commit-0",
            "content": "\n\"use client\";\n\nimport { useState, useEffect, type FormEvent } from \"react\";\nimport { useSession, signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Header } from \"@/components/Header\";\nimport { TaskForm } from \"@/components/TaskForm\";\nimport { TaskList } from \"@/components/TaskList\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Task, Team } from \"@/types\";\nimport { PlusCircle, Wand2, Loader2, LogIn, Mail, Eye, EyeOff, Search, Filter, SearchX, CheckCircle2, AlertTriangle, Info, Plus, UserPlus, Users, UserCheck, XCircle } from \"lucide-react\";\nimport { smartSortTasksAction } from \"./actions\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Home() {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [isDataLoading, setIsDataLoading] = useState(true);\n\n  const [isTaskFormOpen, setIsTaskFormOpen] = useState(false);\n  const [taskToEdit, setTaskToEdit] = useState<Task | undefined>(undefined);\n  const [isSorting, setIsSorting] = useState(false);\n  const { toast } = useToast();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isCredentialsLoading, setIsCredentialsLoading] = useState(false);\n  \n  const [authMode, setAuthMode] = useState<'login' | 'signup'>('login');\n  const [signupName, setSignupName] = useState(\"\");\n  const [signupEmail, setSignupEmail] = useState(\"\");\n  const [signupPassword, setSignupPassword] = useState(\"\");\n  const [isSignupLoading, setIsSignupLoading] = useState(false);\n  \n  const [rememberMe, setRememberMe] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [priorityFilter, setPriorityFilter] = useState<string>(\"all\");\n  const [teamFilter, setTeamFilter] = useState<string>(\"all\");\n  const [assignedToMeFilter, setAssignedToMeFilter] = useState<boolean>(false);\n  \n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n\n  useEffect(() => {\n    setCurrentYear(new Date().getFullYear());\n    if (status === \"authenticated\") {\n      fetchData();\n    } else if (status === \"unauthenticated\") {\n      setIsDataLoading(false);\n    }\n  }, [status]);\n  \n  const fetchData = async () => {\n    setIsDataLoading(true);\n    try {\n      const [tasksRes, teamsRes] = await Promise.all([\n        fetch('/api/tasks'),\n        fetch('/api/teams')\n      ]);\n      \n      if (!tasksRes.ok || !teamsRes.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      \n      const tasksData = await tasksRes.json();\n      const teamsData = await teamsRes.json();\n      \n      setTasks(tasksData);\n      setTeams(teamsData);\n      \n    } catch (error) {\n      toast({\n        title: \"Error fetching data\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDataLoading(false);\n    }\n  };\n\n  const displayedTasks = tasks\n    .filter(task => {\n      const term = searchTerm.toLowerCase();\n      if (!term) return true;\n      return (\n        task.title.toLowerCase().includes(term) ||\n        (task.notes && task.notes.toLowerCase().includes(term))\n      );\n    })\n    .filter(task => {\n      if (priorityFilter === \"all\") return true;\n      if (priorityFilter === \"none\") return !task.priority || task.priority.trim() === \"\";\n      return task.priority?.toLowerCase() === priorityFilter;\n    })\n    .filter(task => {\n      if (teamFilter === \"all\") return true;\n      if (teamFilter === \"personal\") return !task.teamId;\n      return task.teamId === teamFilter;\n    })\n    .filter(task => {\n      if (!assignedToMeFilter) return true;\n      return task.assignedTo?.id === session?.user?.id;\n    })\n    .sort((a, b) => {\n      if (a.status === 'done' && b.status !== 'done') return 1;\n      if (a.status !== 'done' && b.status === 'done') return -1;\n      \n      const priorityOrder: Record<string, number> = { high: 1, medium: 2, low: 3, default: 4 };\n      const getPrioValue = (priority?: string) => {\n        if (!priority || priority.trim() === \"\" || priority === \"none\") return priorityOrder.default;\n        return priorityOrder[priority.toLowerCase()] || priorityOrder.default;\n      };\n      const pA = getPrioValue(a.priority);\n      const pB = getPrioValue(b.priority);\n\n      if (pA !== pB) return pA - pB;\n      return (b.createdAt ?? 0) - (a.createdAt ?? 0); // Sort by most recent\n    });\n\n  const handleResetFilters = () => {\n    setSearchTerm(\"\");\n    setPriorityFilter(\"all\");\n    setTeamFilter(\"all\");\n    setAssignedToMeFilter(false);\n  };\n  \n  const activeFilterCount =\n    (searchTerm.trim() ? 1 : 0) +\n    (priorityFilter !== \"all\" ? 1 : 0) +\n    (teamFilter !== \"all\" ? 1 : 0) +\n    (assignedToMeFilter ? 1 : 0);\n\n  const handleOpenTaskForm = (task?: Task) => {\n    setTaskToEdit(task);\n    setIsTaskFormOpen(true);\n  };\n\n  const handleCloseTaskForm = () => {\n    setIsTaskFormOpen(false);\n    setTaskToEdit(undefined);\n  };\n\n  const handleSaveTask = async (\n    data: { title: string; notes?: string; priority?: string; teamId?: string, assignedTo?: string },\n    existingTask?: Task\n  ) => {\n    const url = existingTask ? `/api/tasks/${existingTask.id}` : '/api/tasks';\n    const method = existingTask ? 'PUT' : 'POST';\n\n    try {\n      const res = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || `Failed to ${existingTask ? 'update' : 'create'} task`);\n      }\n\n      const savedTask: Task = await res.json();\n      \n      if (existingTask) {\n        setTasks(prevTasks => prevTasks.map(t => t.id === savedTask.id ? savedTask : t));\n      } else {\n        setTasks(prevTasks => [savedTask, ...prevTasks]);\n      }\n      \n      toast({\n        title: existingTask ? \"Task Updated\" : \"Task Created\",\n        description: `\"${data.title}\" has been saved.`,\n        icon: <CheckCircle2 className=\"h-5 w-5 text-primary\" />,\n      });\n      handleCloseTaskForm();\n    } catch (error) {\n      toast({\n        title: `Error ${existingTask ? 'Updating' : 'Creating'} Task`,\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteTask = async (taskId: string) => {\n    const taskToDelete = tasks.find(t => t.id === taskId);\n    if (!taskToDelete) return;\n    \n    try {\n      const res = await fetch(`/api/tasks/${taskId}`, { method: 'DELETE' });\n      if (!res.ok) {\n        throw new Error('Failed to delete task from server.');\n      }\n      setTasks(tasks.filter((task) => task.id !== taskId));\n      toast({\n        title: \"Task Deleted\",\n        description: `\"${taskToDelete.title}\" has been removed.`,\n        variant: \"destructive\",\n        icon: <AlertTriangle className=\"h-5 w-5\" />,\n      });\n    } catch(error) {\n      toast({\n        title: \"Error Deleting Task\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleReorderTasks = (reorderedTasks: Task[]) => {\n    // Note: This only updates local state. To persist order, a backend update is needed.\n    setTasks(reorderedTasks);\n  };\n  \n  const handleStatusChange = async (taskId: string, status: Task['status']) => {\n    const originalTasks = tasks;\n    setTasks(prevTasks => prevTasks.map(t => \n      t.id === taskId ? { ...t, status } : t\n    ));\n\n    try {\n      const res = await fetch(`/api/tasks/${taskId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status })\n      });\n      \n      if (!res.ok) {\n        throw new Error(\"Failed to update status on server.\");\n      }\n      \n      const updatedTask = await res.json();\n      setTasks(prevTasks => prevTasks.map(t => t.id === updatedTask.id ? updatedTask : t));\n      \n    } catch (error) {\n      setTasks(originalTasks);\n      toast({\n        title: \"Update Failed\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSmartSort = async () => {\n    if (tasks.length === 0) {\n      toast({\n        title: \"No tasks to sort\",\n        description: \"Add some tasks before using Smart Sort.\",\n        icon: <Info className=\"h-5 w-5 text-primary\" />,\n      });\n      return;\n    }\n    setIsSorting(true);\n    try {\n      const sortedInfos = await smartSortTasksAction(tasks);\n      \n      const updatePromises = sortedInfos.map(info => \n        fetch(`/api/tasks/${info.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ category: info.category, priority: info.priority })\n        })\n      );\n\n      const results = await Promise.all(updatePromises);\n      const failedUpdates = results.filter(res => !res.ok);\n\n      if (failedUpdates.length > 0) {\n        console.error(`${failedUpdates.length} tasks failed to update.`);\n        throw new Error(`Failed to update ${failedUpdates.length} task(s). You may not have permission to edit tasks in some teams.`);\n      }\n\n      await fetchData(); // Re-fetch all data to ensure consistency\n      \n      toast({\n        title: \"Tasks Smart Sorted!\",\n        description: \"Categories and priorities have been updated.\",\n        icon: <CheckCircle2 className=\"h-5 w-5 text-primary\" />,\n      });\n    } catch (error) {\n      console.error(\"Smart Sort Error:\", error);\n      toast({\n        title: \"Smart Sort Failed\",\n        description: (error as Error).message || \"Could not sort tasks. Please try again.\",\n        variant: \"destructive\",\n        icon: <AlertTriangle className=\"h-5 w-5\" />,\n      });\n    } finally {\n      setIsSorting(false);\n    }\n  };\n\n  const handleCredentialsLogin = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsCredentialsLoading(true);\n    try {\n      const result = await signIn('credentials', {\n        email,\n        password,\n        redirect: false, \n      });\n\n      if (result?.error) {\n        toast({\n            title: \"Login Issue\",\n            description: \"Login failed. Please check your credentials.\",\n            variant: \"destructive\",\n        });\n      } else if (result?.ok) {\n        // Successful login, router will redirect based on session status change\n      }\n    } catch (error) {\n       toast({\n        title: \"Login System Error\",\n        description: \"An unexpected error occurred during login.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsCredentialsLoading(false);\n    }\n  };\n\n  const handleSignUp = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsSignupLoading(true);\n\n    try {\n      const res = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name: signupName, email: signupEmail, password: signupPassword }),\n      });\n\n      const data = await res.json();\n\n      if (res.ok) {\n        toast({\n            title: \"Sign Up Successful!\",\n            description: \"You can now log in with your credentials.\",\n            icon: <CheckCircle2 className=\"h-5 w-5 text-primary\" />,\n        });\n        setAuthMode('login');\n        setEmail(signupEmail);\n        setPassword('');\n        setSignupName('');\n        setSignupEmail('');\n        setSignupPassword('');\n      } else {\n        toast({\n            title: \"Sign Up Failed\",\n            description: data.message || \"An error occurred during sign up.\",\n            variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Sign Up Error\",\n        description: \"Could not connect to the server. Please try again later.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSignupLoading(false);\n    }\n  };\n\n  if (status === \"loading\" || isDataLoading) {\n    return (\n      <div className=\"min-h-screen flex flex-col bg-background\">\n        <Header />\n        <main className=\"flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8 flex items-center justify-center\">\n          <Loader2 className=\"h-16 w-16 animate-spin text-primary\" />\n        </main>\n        <footer className=\"py-6 text-center text-sm text-muted-foreground border-t border-border/50\">\n          ¬© {currentYear} TaskFlow. Crafted with üß† & ‚ù§Ô∏è.\n        </footer>\n      </div>\n    );\n  }\n\n  if (!session) {\n    return (\n      <div className=\"min-h-screen flex flex-col bg-background\">\n        <Header />\n        <main className=\"flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8 flex flex-col items-center justify-center text-center\">\n          <div className=\"bg-card p-8 rounded-xl shadow-2xl w-full max-w-md\">\n            <h2 className=\"text-3xl font-headline font-semibold text-foreground mb-2\">\n              {authMode === 'login' ? 'Welcome Back!' : 'Create an Account'}\n            </h2>\n            <p className=\"text-muted-foreground mb-6\">\n              {authMode === 'login' ? 'Log in to manage your tasks.' : 'Get started with TaskFlow for free.'}\n            </p>\n\n            <Button onClick={() => signIn(\"google\", { callbackUrl: \"/\" })} size=\"lg\" className=\"w-full mb-4 shadow-md hover:shadow-lg transition-shadow bg-primary hover:bg-primary/90\">\n              <LogIn className=\"mr-2 h-5 w-5\" />\n              Continue with Google\n            </Button>\n\n            <div className=\"my-6 flex items-center w-full\">\n              <Separator className=\"flex-grow shrink\" />\n              <span className=\"mx-4 text-xs text-muted-foreground uppercase\">Or</span>\n              <Separator className=\"flex-grow shrink\" />\n            </div>\n\n            {authMode === 'login' ? (\n              <form onSubmit={handleCredentialsLogin} className=\"space-y-6 text-left\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email-login\">Email</Label>\n                  <Input id=\"email-login\" type=\"email\" placeholder=\"user@example.com\" value={email} onChange={(e) => setEmail(e.target.value)} required className=\"bg-background border-input focus:ring-primary\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password-login\">Password</Label>\n                  <div className=\"relative\">\n                    <Input id=\"password-login\" type={showPassword ? \"text\" : \"password\"} placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\" value={password} onChange={(e) => setPassword(e.target.value)} required className=\"bg-background border-input focus:ring-primary pr-10\" />\n                    <Button type=\"button\" variant=\"ghost\" size=\"icon\" className=\"absolute inset-y-0 right-0 h-full px-3 text-muted-foreground hover:bg-transparent\" onClick={() => setShowPassword(!showPassword)}>\n                       {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox id=\"remember-me\" checked={rememberMe} onCheckedChange={(checked) => setRememberMe(Boolean(checked))} />\n                    <Label htmlFor=\"remember-me\" className=\"text-sm font-normal text-muted-foreground cursor-pointer\">Remember me</Label>\n                  </div>\n                </div>\n                <Button type=\"submit\" size=\"lg\" className=\"w-full shadow-md hover:shadow-lg transition-shadow\" disabled={isCredentialsLoading}>\n                  {isCredentialsLoading ? <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" /> : <Mail className=\"mr-2 h-5 w-5\" />}\n                  Login with Email\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={handleSignUp} className=\"space-y-4 text-left\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name-signup\">Full Name</Label>\n                  <Input id=\"name-signup\" type=\"text\" placeholder=\"John Doe\" value={signupName} onChange={(e) => setSignupName(e.target.value)} required className=\"bg-background border-input focus:ring-primary\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email-signup\">Email</Label>\n                  <Input id=\"email-signup\" type=\"email\" placeholder=\"you@example.com\" value={signupEmail} onChange={(e) => setSignupEmail(e.target.value)} required className=\"bg-background border-input focus:ring-primary\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password-signup\">Password</Label>\n                  <Input id=\"password-signup\" type=\"password\" placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\" value={signupPassword} onChange={(e) => setSignupPassword(e.target.value)} required className=\"bg-background border-input focus:ring-primary\" />\n                </div>\n                <Button type=\"submit\" size=\"lg\" className=\"w-full shadow-md hover:shadow-lg transition-shadow\" disabled={isSignupLoading}>\n                  {isSignupLoading ? <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" /> : <UserPlus className=\"mr-2 h-5 w-5\" />}\n                  Create Account\n                </Button>\n              </form>\n            )}\n\n            <p className=\"mt-6 text-center text-sm text-muted-foreground\">\n              {authMode === 'login' ? (\n                <> Don&apos;t have an account?{\" \"} <Button variant=\"link\" className=\"p-0 h-auto font-semibold\" onClick={() => setAuthMode('signup')}>Sign Up</Button> </>\n              ) : (\n                <> Already have an account?{\" \"} <Button variant=\"link\" className=\"p-0 h-auto font-semibold\" onClick={() => setAuthMode('login')}>Log In</Button> </>\n              )}\n            </p>\n          </div>\n        </main>\n        <footer className=\"py-6 text-center text-sm text-muted-foreground border-t border-border/50\">\n          ¬© {currentYear} TaskFlow. Crafted with üß† & ‚ù§Ô∏è.\n        </footer>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      <Header />\n      <main className=\"flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-center mb-6 gap-4\">\n          <div className=\"flex items-baseline gap-2\">\n            <h2 className=\"text-2xl font-headline font-semibold text-foreground\">Your Tasks</h2>\n            <span className=\"text-sm text-muted-foreground\">\n              {activeFilterCount === 0\n                ? `(${tasks.length} task${tasks.length === 1 ? \"\" : \"s\"})`\n                : `(${displayedTasks.length} of ${tasks.length} task${tasks.length === 1 ? \"\" : \"s\"} shown)`}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-3 w-full sm:w-auto\">\n            <Button onClick={handleSmartSort} disabled={isSorting || tasks.length === 0} variant=\"outline\" className=\"shadow-sm hover:shadow-md transition-shadow w-full sm:w-auto\">\n              {isSorting ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Wand2 className=\"mr-2 h-4 w-4 text-accent\" />}\n              Smart Sort\n            </Button>\n            <Button onClick={() => handleOpenTaskForm()} className=\"shadow-sm hover:shadow-lg focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-all duration-150 bg-primary hover:bg-primary/90 text-primary-foreground w-full sm:w-auto\">\n              <PlusCircle className=\"mr-2 h-5 w-5\" />\n              Add New Task\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-4 mb-8\">\n            <Popover>\n                <PopoverTrigger asChild>\n                    <Button variant=\"outline\" className=\"shadow-sm\">\n                        <Filter className=\"mr-2 h-4 w-4\" />\n                        Filters\n                        {activeFilterCount > 0 && (\n                        <Badge variant=\"secondary\" className=\"ml-2 rounded-full h-5 w-5 flex items-center justify-center p-0\">\n                            {activeFilterCount}\n                        </Badge>\n                        )}\n                    </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-96\" align=\"start\">\n                    <div className=\"grid gap-y-6\">\n                        <div className=\"space-y-2\">\n                            <h4 className=\"font-medium leading-none\">Filter Tasks</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                                Refine your task list with the options below.\n                            </p>\n                        </div>\n                        <div className=\"grid gap-4\">\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"search-filter\">Search</Label>\n                                <div className=\"relative\">\n                                    <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                                    <Input id=\"search-filter\" type=\"search\" placeholder=\"Search tasks...\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className=\"pl-10 w-full bg-background\" />\n                                </div>\n                            </div>\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"priority-filter\">Priority</Label>\n                                <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                                    <SelectTrigger id=\"priority-filter\" className=\"w-full bg-background\">\n                                        <SelectValue placeholder=\"Filter by priority\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        <SelectItem value=\"all\">All Priorities</SelectItem>\n                                        <SelectItem value=\"high\">High</SelectItem>\n                                        <SelectItem value=\"medium\">Medium</SelectItem>\n                                        <SelectItem value=\"low\">Low</SelectItem>\n                                        <SelectItem value=\"none\">No Priority</SelectItem>\n                                    </SelectContent>\n                                </Select>\n                            </div>\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"team-filter\">Team</Label>\n                                <Select value={teamFilter} onValueChange={setTeamFilter}>\n                                    <SelectTrigger id=\"team-filter\" className=\"w-full bg-background\">\n                                        <SelectValue placeholder=\"Filter by team\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        <SelectItem value=\"all\">All Teams & Personal</SelectItem>\n                                        <SelectItem value=\"personal\">Personal (No Team)</SelectItem>\n                                        <Separator />\n                                        {teams.map(team => (\n                                        <SelectItem key={team.id} value={team.id}>{team.name}</SelectItem>\n                                        ))}\n                                    </SelectContent>\n                                </Select>\n                            </div>\n                            <div className=\"flex items-center space-x-2 pt-2\">\n                                <Checkbox id=\"assigned-to-me-filter\" checked={assignedToMeFilter} onCheckedChange={(checked) => setAssignedToMeFilter(Boolean(checked))} />\n                                <Label htmlFor=\"assigned-to-me-filter\" className=\"text-sm font-medium leading-none cursor-pointer\">\n                                    Only show tasks assigned to me\n                                </Label>\n                            </div>\n                        </div>\n                         {activeFilterCount > 0 && (\n                            <Button size=\"sm\" variant=\"ghost\" onClick={handleResetFilters} className=\"justify-start p-0 h-auto text-sm text-muted-foreground hover:text-foreground\">\n                                <XCircle className=\"mr-2 h-4 w-4\" />\n                                Clear all filters\n                            </Button>\n                        )}\n                    </div>\n                </PopoverContent>\n            </Popover>\n        </div>\n\n\n        {tasks.length > 0 && displayedTasks.length === 0 && (\n          <div className=\"mt-12 flex flex-col items-center justify-center text-center text-muted-foreground p-8 border-2 border-dashed border-border rounded-xl bg-card/50\">\n            <SearchX size={64} className=\"mb-4 opacity-50\" />\n            <h3 className=\"text-xl font-semibold mb-2 text-foreground\">No Matching Tasks</h3>\n            <p className=\"max-w-sm\">Try adjusting your search or filter criteria.</p>\n          </div>\n        )}\n\n        { (tasks.length === 0 || displayedTasks.length > 0) && (\n            <TaskList \n              tasks={displayedTasks} \n              onEditTask={handleOpenTaskForm} \n              onDeleteTask={handleDeleteTask} \n              onReorderTasks={handleReorderTasks}\n              onStatusChange={handleStatusChange}\n            />\n          )\n        }\n      </main>\n\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button onClick={() => handleOpenTaskForm()} className=\"fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-xl hover:shadow-2xl focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-all duration-150 bg-primary hover:bg-primary/90 text-primary-foreground p-0 z-50 flex items-center justify-center\" aria-label=\"Quick Add Task\">\n              <Plus className=\"h-7 w-7\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>Quick Add Task</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n\n      <TaskForm isOpen={isTaskFormOpen} onClose={handleCloseTaskForm} onSubmit={handleSaveTask} taskToEdit={taskToEdit} teams={teams} />\n\n      <footer className=\"py-6 text-center text-sm text-muted-foreground border-t border-border/50\">\n        ¬© {currentYear} TaskFlow. Craftedby Dravya Shah\n      </footer>\n    </div>\n  );\n}\n"
        }
    ]
}