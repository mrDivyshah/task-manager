{
    "sourceFile": "src/app/api/auth/[...nextauth]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1750667041678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750667052202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,11 +47,9 @@\n           name: user.name,\r\n           email: user.email,\r\n           image: user.image,\r\n           gender: user.gender,\r\n-\r\n           role: user.role,\r\n->>>>>>> master\r\n         };\r\n       }\r\n     })\r\n   ],\r\n@@ -93,10 +91,9 @@\n           token.gender = dbUser.gender;\r\n           token.notificationSoundEnabled = dbUser.notificationSoundEnabled;\r\n           token.notificationStyle = dbUser.notificationStyle;\r\n           token.advancedFeaturesEnabled = dbUser.advancedFeaturesEnabled;\r\n-<<<<<<< HEAD\r\n-=======\r\n+\r\n           token.role = dbUser.role;\r\n >>>>>>> master\r\n         }\r\n       }\r\n"
                },
                {
                    "date": 1750667059784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,11 +91,9 @@\n           token.gender = dbUser.gender;\r\n           token.notificationSoundEnabled = dbUser.notificationSoundEnabled;\r\n           token.notificationStyle = dbUser.notificationStyle;\r\n           token.advancedFeaturesEnabled = dbUser.advancedFeaturesEnabled;\r\n-\r\n           token.role = dbUser.role;\r\n->>>>>>> master\r\n         }\r\n       }\r\n       \r\n       if (trigger === \"update\" && session?.user) {\r\n@@ -105,10 +103,9 @@\n         if (session.user.gender) token.gender = session.user.gender;\r\n         if (session.user.notificationSoundEnabled !== undefined) token.notificationSoundEnabled = session.user.notificationSoundEnabled;\r\n         if (session.user.notificationStyle) token.notificationStyle = session.user.notificationStyle;\r\n         if (session.user.advancedFeaturesEnabled !== undefined) token.advancedFeaturesEnabled = session.user.advancedFeaturesEnabled;\r\n-<<<<<<< HEAD\r\n-=======\r\n+\r\n         if (session.user.role) token.role = session.user.role;\r\n >>>>>>> master\r\n       }\r\n       \r\n"
                },
                {
                    "date": 1750667067997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,10 +118,9 @@\n         session.user.gender = token.gender;\r\n         session.user.notificationSoundEnabled = token.notificationSoundEnabled;\r\n         session.user.notificationStyle = token.notificationStyle as 'dock' | 'float' | undefined;\r\n         session.user.advancedFeaturesEnabled = token.advancedFeaturesEnabled;\r\n-<<<<<<< HEAD\r\n-=======\r\n+\r\n         session.user.role = token.role as string;\r\n >>>>>>> master\r\n       }\r\n       return session;\r\n"
                }
            ],
            "date": 1750667041678,
            "name": "Commit-0",
            "content": "\r\nimport NextAuth from \"next-auth\"\r\nimport GoogleProvider from \"next-auth/providers/google\"\r\nimport CredentialsProvider from \"next-auth/providers/credentials\"\r\nimport type { NextAuthOptions } from \"next-auth\"\r\nimport dbConnect from \"@/lib/mongodb\"\r\nimport User from \"@/models/user\"\r\nimport bcrypt from \"bcryptjs\"\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID as string,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\r\n    }),\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\", placeholder: \"jsmith@example.com\" },\r\n        password: { label: \"Password\", type: \"password\" }\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials.password) {\r\n          return null;\r\n        }\r\n\r\n        await dbConnect();\r\n\r\n        const user = await User.findOne({ email: credentials.email }).select('+password');\r\n\r\n        if (!user || !user.password) {\r\n          return null;\r\n        }\r\n\r\n        const isPasswordCorrect = await bcrypt.compare(\r\n          credentials.password,\r\n          user.password\r\n        );\r\n\r\n        if (!isPasswordCorrect) {\r\n          return null;\r\n        }\r\n\r\n        // Return a plain object, not a Mongoose document\r\n        return {\r\n          id: user._id.toString(),\r\n          name: user.name,\r\n          email: user.email,\r\n          image: user.image,\r\n          gender: user.gender,\r\n\r\n          role: user.role,\r\n>>>>>>> master\r\n        };\r\n      }\r\n    })\r\n  ],\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  callbacks: {\r\n    async signIn({ user, account }) {\r\n      if (account?.provider === 'google') {\r\n        if (!user.email) return false;\r\n        await dbConnect();\r\n        try {\r\n          const existingUser = await User.findOne({ email: user.email });\r\n          if (!existingUser) {\r\n            await User.create({\r\n              email: user.email,\r\n              name: user.name || user.email.split('@')[0], \r\n              image: user.image,\r\n            });\r\n          }\r\n          return true; \r\n        } catch (error) {\r\n          console.error(\"Error during Google sign-in user check/creation:\", error);\r\n          return false;\r\n        }\r\n      }\r\n      return true; \r\n    },\r\n    async jwt({ token, user, trigger, session }) {\r\n      if (user) { // This block runs on initial sign-in\r\n        await dbConnect();\r\n        const dbUser = await User.findOne({ email: user.email });\r\n        if (dbUser) {\r\n          token.id = dbUser._id.toString();\r\n          token.name = dbUser.name;\r\n          token.email = dbUser.email;\r\n          token.picture = dbUser.image;\r\n          token.gender = dbUser.gender;\r\n          token.notificationSoundEnabled = dbUser.notificationSoundEnabled;\r\n          token.notificationStyle = dbUser.notificationStyle;\r\n          token.advancedFeaturesEnabled = dbUser.advancedFeaturesEnabled;\r\n<<<<<<< HEAD\r\n=======\r\n          token.role = dbUser.role;\r\n>>>>>>> master\r\n        }\r\n      }\r\n      \r\n      if (trigger === \"update\" && session?.user) {\r\n        // This block runs when `update({ ... })` is called from the client\r\n        if (session.user.name) token.name = session.user.name;\r\n        if (session.user.image) token.picture = session.user.image;\r\n        if (session.user.gender) token.gender = session.user.gender;\r\n        if (session.user.notificationSoundEnabled !== undefined) token.notificationSoundEnabled = session.user.notificationSoundEnabled;\r\n        if (session.user.notificationStyle) token.notificationStyle = session.user.notificationStyle;\r\n        if (session.user.advancedFeaturesEnabled !== undefined) token.advancedFeaturesEnabled = session.user.advancedFeaturesEnabled;\r\n<<<<<<< HEAD\r\n=======\r\n        if (session.user.role) token.role = session.user.role;\r\n>>>>>>> master\r\n      }\r\n      \r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token && session.user) {\r\n        session.user.id = token.id as string;\r\n        session.user.name = token.name;\r\n        session.user.email = token.email;\r\n        session.user.image = token.picture as string | undefined;\r\n        session.user.gender = token.gender;\r\n        session.user.notificationSoundEnabled = token.notificationSoundEnabled;\r\n        session.user.notificationStyle = token.notificationStyle as 'dock' | 'float' | undefined;\r\n        session.user.advancedFeaturesEnabled = token.advancedFeaturesEnabled;\r\n<<<<<<< HEAD\r\n=======\r\n        session.user.role = token.role as string;\r\n>>>>>>> master\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: '/', \r\n  },\r\n  debug: process.env.NODE_ENV === 'development',\r\n}\r\n\r\nconst handler = NextAuth(authOptions)\r\n\r\nexport { handler as GET, handler as POST }\r\n"
        }
    ]
}