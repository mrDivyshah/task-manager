{
    "sourceFile": "src/app/api/teams/[id]/members/[memberId]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750666410954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750666419625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     }\r\n \r\n     // Only the team owner can remove members\r\n     if (team.ownerId.toString() !== session.user.id) {\r\n-      return NextResponse.json({ message: \"You are not authorized to manage this team's members' }, { status: 403 });\r\n+      return NextResponse.json({ message: \"You are not authorized to manage this team's members\" }, { status: 403 });\r\n     }\r\n     \r\n     // The owner cannot remove themselves\r\n     if (memberId === team.ownerId.toString()) {\r\n"
                }
            ],
            "date": 1750666410953,
            "name": "Commit-0",
            "content": "\r\nimport { NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth/next';\r\nimport { authOptions } from '@/app/api/auth/[...nextauth]/route';\r\nimport dbConnect from '@/lib/mongodb';\r\nimport Team from '@/models/team';\r\nimport mongoose from 'mongoose';\r\n\r\nexport async function DELETE(req: Request, { params }: { params: { id: string; memberId: string } }) {\r\n  const session = await getServerSession(authOptions);\r\n  if (!session?.user?.id) {\r\n    return NextResponse.json({ message: 'Not authenticated' }, { status: 401 });\r\n  }\r\n\r\n  try {\r\n    await dbConnect();\r\n    const { id: teamId, memberId } = params;\r\n\r\n    if (!mongoose.Types.ObjectId.isValid(teamId) || !mongoose.Types.ObjectId.isValid(memberId)) {\r\n        return NextResponse.json({ message: 'Invalid team or member ID' }, { status: 400 });\r\n    }\r\n\r\n    const team = await Team.findById(teamId);\r\n\r\n    if (!team) {\r\n      return NextResponse.json({ message: 'Team not found' }, { status: 404 });\r\n    }\r\n\r\n    // Only the team owner can remove members\r\n    if (team.ownerId.toString() !== session.user.id) {\r\n      return NextResponse.json({ message: \"You are not authorized to manage this team's members' }, { status: 403 });\r\n    }\r\n    \r\n    // The owner cannot remove themselves\r\n    if (memberId === team.ownerId.toString()) {\r\n        return NextResponse.json({ message: 'The team owner cannot be removed' }, { status: 400 });\r\n    }\r\n\r\n    // Pull the member from the members array\r\n    await Team.updateOne({ _id: teamId }, { $pull: { members: memberId } });\r\n\r\n    // Here you might also want to unassign tasks from the removed member in this team\r\n    // For now, we'll just remove them from the team.\r\n\r\n    return NextResponse.json({ message: 'Member removed successfully' }, { status: 200 });\r\n\r\n  } catch (error) {\r\n    console.error('Error removing team member:', error);\r\n    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });\r\n  }\r\n}\r\n"
        }
    ]
}